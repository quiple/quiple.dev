---
import Footer from '@/components/Footer.astro'
import Header from '@/components/Header.astro'
import {buttonVariants} from '@/components/ui/button'
import Layout from '@/layouts/Layout.astro'
import type {AstroCookies} from 'astro'

const {env} = Astro.locals.runtime

const interlockParams = new URLSearchParams({
  clientId: env.CHZZK_CLIENTID,
  redirectUri: env.CHZZK_REDIRECTURI,
  state: env.CHZZK_STATE,
})

export const getUser = async (cookies: AstroCookies) => {
  const response = await fetch('https://openapi.chzzk.naver.com/open/v1/users/me', {
    method: 'get',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${cookies.get('accessToken')?.value}`,
    },
  })
  return await response.json()
}

export const refreshAccessToken = async (cookies: AstroCookies) => {
  const response = await fetch('https://openapi.chzzk.naver.com/auth/v1/token', {
    method: 'post',
    headers: {'Content-Type': 'application/json'},
    body: JSON.stringify({
      grantType: 'refresh_token',
      clientId: env.CHZZK_CLIENTID,
      clientSecret: env.CHZZK_CLIENTSECRET,
      refreshToken: cookies.get('refreshToken')?.value,
    }),
  })
  const data = await response.json()

  if (data.code === 200) {
    console.log(data)
    cookies.set('accessToken', data.content.accessToken, {
      httpOnly: true,
      secure: true,
      sameSite: 'lax',
    })
    return true
  }
  return false
}

export const checkSignedIn = async (cookies: AstroCookies) => {
  if (cookies.has('accessToken')) {
    const user = await getUser(cookies)

    if (user.code === 200) {
      console.log(user)
      return true
    }

    if (user.code === 401 && cookies.has('refreshToken')) {
      const refresh = await refreshAccessToken(cookies)

      if (refresh) {
        const user = await getUser(cookies)

        if (user.code === 200) {
          console.log(user)
          return true
        }
      }
      return false
    }
    return false
  }
  return false
}

const isSignedIn = await checkSignedIn(Astro.cookies)
const user = await getUser(Astro.cookies)
---

<Layout>
  <Header />
  {isSignedIn ? (
    <main>
      <p>로그인 상태입니다. 채널 ID: {user.content.channelId}</p>
      <a class={buttonVariants()} href="/chzzk/signout">로그아웃</a>
    </main>
  ) : (
    <main>
      <a
        class={buttonVariants()}
        rel="nofollow noreferrer noopener"
        href={`https://chzzk.naver.com/account-interlock?${interlockParams}`}>
        치지직으로 로그인
      </a>
    </main>
  )}
  <Footer />
</Layout>

<style lang="sass">
  @reference '@/styles/global.css'

  main
    @apply mx-auto px-16 pt-8 container flex items-center justify-center
</style>
