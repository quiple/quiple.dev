---
import {between, count, eq} from 'drizzle-orm'
import {drizzle} from 'drizzle-orm/neon-http'
import {titleCase} from 'title-case'
import Footer from '@/components/Footer.astro'
import Header from '@/components/Header.astro'
import {Button, buttonVariants} from '@/components/ui/button'
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from '@/components/ui/pagination'
import {TooltipButton} from '@/components/unicode/block'
import {unicodeBlocks, unicodeData} from '@/db/schema'
import Layout from '@/layouts/Layout.astro'
import {unicodeTitleCase} from '@/lib/utils'

const {id, page} = Astro.params
const pageSize = 256
const {env} = Astro.locals.runtime
const db = drizzle(env.DATABASE_URL)

if (id === undefined) return Astro.redirect('/404')
if (/[A-Z]+/.test(id)) return Astro.redirect(`/unicode/block/${id.toLowerCase()}`)

const currentPage = page ? Number(page) : 1
if (page && Number.isNaN(currentPage)) return Astro.redirect('/404')

const block = (
  await db
    .select()
    .from(unicodeBlocks)
    .where(eq(unicodeBlocks.first, parseInt(id, 16)))
)[0]
if (block === undefined) return Astro.redirect('/404')

const total = (
  await db
    .select({count: count()})
    .from(unicodeData)
    .where(between(unicodeData.code, block.first, block.last))
)[0].count

const getChars = async (page = 1, pageSize = 15) => {
  return await db
    .select({code: unicodeData.code, name: unicodeData.name})
    .from(unicodeData)
    .where(between(unicodeData.code, block.first, block.last))
    .limit(pageSize)
    .offset((page - 1) * pageSize)
}
const chars = await getChars(currentPage, pageSize)
if (chars.length === 0) return Astro.redirect('/404')
const zero2F = Array.from({length: 16}, (_e, i) => i.toString(16).toUpperCase())
const allCodePoints = Array.from({length: block.last - block.first + 1}, (_e, i) => i + block.first)
const rowLabels = [
  ...new Set(
    allCodePoints.map((e) =>
      e
        .toString(16)
        .padStart(4, '0')
        .substring(0, e.toString(16).padStart(4, '0').length - 1)
        .toUpperCase(),
    ),
  ),
]
const totalPage = Math.ceil(allCodePoints.length / pageSize)
---

<Layout title={`유니코드 블록 ‘${block.nameKo}’`}>
  <Header />
  <main class="container-x py-4">
    <section>
      범위: U+{block.first.toString(16).padStart(4, '0').toUpperCase()}~{block.last.toString(16).padStart(4, '0').toUpperCase()}<br />
      이름: {block.nameKo}<br />
      이름: {block.name}<br />
      문자 수: {total}<br />
      <a
        href={`https://en.wikipedia.org/wiki/${block.name.replaceAll(' ', '_')}_(Unicode_block)`}
        target="_blank"
        rel="nofollow noreferrer noopener"
      >
        위키백과 (영어)
      </a>
    </section>
    <section class="block-grid">
      <div class="flex gap-2">
        <div class="basis-17.5 shrink-0">
        </div>
        <div class="grid grid-cols-16 gap-1 xl:gap-2 grow text-center tabular-nums">
          {zero2F.map((n) => <div>{n}</div>)}
        </div>
      </div>
      <div class="flex gap-2">
        <div class="basis-17.5 shrink-0 flex flex-col gap-1 xl:gap-2 tabular-nums">
          {rowLabels.map((e) => <div class="grow flex items-center justify-end">U+{e}</div>)}
        </div>
        <div class="grid grid-cols-16 gap-1 xl:gap-2 grow text-center">
          {allCodePoints.map((e) => {
            return chars.find((f) => f.code === e)
              ? (
                <TooltipButton client:load tooltip={unicodeTitleCase(titleCase(chars.find((f) => f.code === e)?.name.toLowerCase()!))}>
                  <a
                    class={`${buttonVariants({variant: 'secondary', size: 'lg'})} item`}
                    href={`/unicode/${e.toString(16).padStart(4, '0')}`}
                    aria-label={`${unicodeTitleCase(titleCase(chars.find((f) => f.code === e)?.name.toLowerCase()!))} (U+${e.toString(16).padStart(4, '0').toUpperCase()})`}
                  >
                    {String.fromCodePoint(e)}
                  </a>
                </TooltipButton>
              ) : <Button disabled variant="outline" size="lg" className="item" />
          })}
        </div>
      </div>
    </section>
    <section class="pagiantion p-2">
      <div class="text-muted-foreground mt-4 text-sm">{totalPage}페이지 중 {currentPage}페이지</div>
    </section>
    <Pagination>
      <PaginationContent>
        <PaginationItem>
          <PaginationPrevious className={currentPage === 1 ? 'disabled' : undefined} href={`/unicode/block/${id}/${currentPage - 1}`} />
        </PaginationItem>
        {currentPage > 2 &&
        <PaginationItem>
          <PaginationLink href={`/unicode/block/${id}/${currentPage - 2}`}>{currentPage - 2}</PaginationLink>
        </PaginationItem>}
        {currentPage > 1 &&
        <PaginationItem>
          <PaginationLink href={`/unicode/block/${id}/${currentPage - 1}`}>{currentPage - 1}</PaginationLink>
        </PaginationItem>}
        <PaginationItem>
          <PaginationLink isActive>{currentPage}</PaginationLink>
        </PaginationItem>
        {currentPage < totalPage &&
        <PaginationItem>
          <PaginationLink href={`/unicode/block/${id}/${currentPage + 1}`}>{currentPage + 1}</PaginationLink>
        </PaginationItem>}
        {currentPage < totalPage - 1 &&
        <PaginationItem>
          <PaginationLink href={`/unicode/block/${id}/${currentPage + 2}`}>{currentPage + 2}</PaginationLink>
        </PaginationItem>}
        <PaginationItem>
          <PaginationNext className={currentPage === totalPage ? 'disabled' : undefined} href={`/unicode/block/${id}/${currentPage + 1}`} />
        </PaginationItem>
      </PaginationContent>
    </Pagination>
  </main>
  <Footer />
</Layout>

<style lang="sass" is:global>
  @reference '@/styles/global.css'

  .block-grid
    @apply flex flex-col gap-2 leading-none
    button, .item
      @apply md:text-lg lg:text-xl xl:text-2xl 2xl:text-3xl aspect-square p-0 h-auto font-normal w-full leading-0
</style>
