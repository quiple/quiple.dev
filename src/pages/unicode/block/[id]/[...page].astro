---
import {between, count, eq} from 'drizzle-orm'
import {drizzle} from 'drizzle-orm/neon-http'
import {titleCase} from 'title-case'
import Footer from '@/components/Footer.astro'
import Header from '@/components/Header.astro'
import {Paginate} from '@/components/pagination'
import {Button, buttonVariants} from '@/components/ui/button'
import {TooltipButton} from '@/components/unicode/block'
import {unicodeBlocks, unicodeData} from '@/db/schema'
import Layout from '@/layouts/Layout.astro'
import {unicodeTitleCase} from '@/lib/utils'

const {id, page} = Astro.params
const pageSize = 256
const {env} = Astro.locals.runtime
const db = drizzle(env.DATABASE_URL)

if (id === undefined) return Astro.redirect('/404')
if (/[A-Z]+/.test(id) || id.length < 4)
  return Astro.redirect(`/unicode/block/${id.toLowerCase().padStart(4, '0')}`)

const pageNumber = page ? Number(page) : 1
if (page && Number.isNaN(pageNumber)) return Astro.redirect('/404')

const unicodeBlock = (
  await db
    .select()
    .from(unicodeBlocks)
    .where(eq(unicodeBlocks.first, parseInt(id, 16)))
)[0]
if (unicodeBlock === undefined) return Astro.redirect('/404')

const blockStartCode = unicodeBlock.first + (pageNumber - 1) * pageSize
const blockEndCode = blockStartCode + pageSize < unicodeBlock.last ? blockStartCode + pageSize : unicodeBlock.last
const totalCharCount = (
  await db
    .select({count: count()})
    .from(unicodeData)
    .where(between(unicodeData.code, unicodeBlock.first, unicodeBlock.last))
)[0].count
const allCodePoints = Array.from({length: unicodeBlock.last - unicodeBlock.first + 1}, (_e, i) => i + unicodeBlock.first)
const pageStartIdx = (pageNumber - 1) * pageSize
const pageEndIdx = Math.min(pageStartIdx + pageSize, allCodePoints.length)
const pageCodePoints = allCodePoints.slice(pageStartIdx, pageEndIdx)

const rowPrefixes: string[] = []
let prevPrefix = ''
for (const codePoint of pageCodePoints) {
  const prefix = codePoint.toString(16).padStart(4, '0').slice(0, -1).toUpperCase()
  if (prefix !== prevPrefix) {
    rowPrefixes.push(prefix)
    prevPrefix = prefix
  }
}

const totalPages = Math.ceil(allCodePoints.length / pageSize)
const unicodeChars = await db
  .select({code: unicodeData.code, name: unicodeData.name})
  .from(unicodeData)
  .where(between(unicodeData.code, blockStartCode, blockEndCode))

const unicodeCharMap = new Map(unicodeChars.map((c) => [c.code, c]))
---

<Layout title={`유니코드 블록 ‘${unicodeBlock.nameKo ? unicodeBlock.nameKo : unicodeBlock.name}’`}>
  <Header />
  <main class="container-x py-4">
    <section>
      범위: U+{unicodeBlock.first.toString(16).padStart(4, '0').toUpperCase()}~{unicodeBlock.last.toString(16).padStart(4, '0').toUpperCase()}<br />
      이름: {unicodeBlock.nameKo}<br />
      이름: {unicodeBlock.name}<br />
      문자 수: {Intl.NumberFormat('ko-KR').format(totalCharCount)}<br />
      <a
        href={`https://en.wikipedia.org/wiki/${unicodeBlock.name.replaceAll(' ', '_')}_(Unicode_block)`}
        target="_blank"
        rel="nofollow noreferrer noopener"
      >
        위키백과 (영어)
      </a>
    </section>
    <section class="block-grid">
      <div class="flex gap-2">
        <div class="basis-17.5 shrink-0">
        </div>
        <div class="grid grid-cols-16 gap-1 xl:gap-2 grow text-center tabular-nums">
          <div>0</div>
          <div>1</div>
          <div>2</div>
          <div>3</div>
          <div>4</div>
          <div>5</div>
          <div>6</div>
          <div>7</div>
          <div>8</div>
          <div>9</div>
          <div>A</div>
          <div>B</div>
          <div>C</div>
          <div>D</div>
          <div>E</div>
          <div>F</div>
        </div>
      </div>
      <div class="flex gap-2">
        <div class="basis-17.5 shrink-0 flex flex-col gap-1 xl:gap-2 tabular-nums">
          {rowPrefixes.map((prefix) => <div class="grow flex items-center justify-end">U+{prefix}</div>)}
        </div>
        <div class="grid grid-cols-16 gap-1 xl:gap-2 grow text-center">
          {pageCodePoints.map((codePoint) => {
            const charData = unicodeCharMap.get(codePoint);
            return charData
              ? (
                <TooltipButton client:load tooltip={unicodeTitleCase(titleCase(charData.name.toLowerCase()))}>
                  <a
                    class={`${buttonVariants({variant: 'secondary', size: 'lg'})} item`}
                    href={`/unicode/${codePoint.toString(16).padStart(4, '0')}`}
                    aria-label={`${unicodeTitleCase(titleCase(charData.name.toLowerCase()))} (U+${codePoint.toString(16).padStart(4, '0').toUpperCase()})`}
                  >
                    {String.fromCodePoint(codePoint)}
                  </a>
                </TooltipButton>
              ) : <Button disabled variant="outline" size="lg" className="item" />
          })}
        </div>
      </div>
    </section>
    <Paginate currentPage={pageNumber} totalPages={totalPages} url={`/unicode/block/${id}`} />
  </main>
  <Footer />
</Layout>

<style lang="sass" is:global>
  @reference '@/styles/global.css'

  .block-grid
    @apply flex flex-col gap-2 leading-none
    button, .item
      @apply md:text-lg lg:text-xl xl:text-2xl 2xl:text-3xl aspect-square p-0 h-auto font-normal w-full leading-0
</style>
